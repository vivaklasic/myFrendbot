/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import { audioContext } from './utils';
import AudioRecordingWorklet from './worklets/audio-processing';
import VolMeterWorket from './worklets/vol-meter';
import { createWorketFromSrc } from './audioworklet-registry';
import EventEmitter from 'eventemitter3';

function arrayBufferToBase64(buffer: ArrayBuffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}

export class AudioRecorder extends EventEmitter {
  stream: MediaStream | undefined;
  audioContext: AudioContext | undefined;
  source: MediaStreamAudioSourceNode | undefined;
  recording: boolean = false;
  recordingWorklet: AudioWorkletNode | undefined;
  vuWorklet: AudioWorkletNode | undefined;
  private starting: Promise<void> | null = null;

  constructor(public sampleRate = 16000) {
    super();
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞—É–¥—ñ–æ–≤—Ö–æ–¥—ñ–≤
   * –í–ê–ñ–õ–ò–í–û: –í–∏–∫–ª–∏–∫–∞—Ç–∏ –ü–Ü–°–õ–Ø –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
   */
  async getAudioInputs(): Promise<MediaDeviceInfo[]> {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const inputs = devices.filter(device => device.kind === 'audioinput');
    
    console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ñ –∞—É–¥—ñ–æ–≤—Ö–æ–¥–∏:', inputs.map(d => ({
      id: d.deviceId,
      label: d.label,
      groupId: d.groupId
    })));
    
    return inputs;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –∑–∞–ø–∏—Å—É
   * @param deviceId - ID –ø—Ä–∏—Å—Ç—Ä–æ—é (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ). –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
   */
  async start(deviceId?: string) {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      throw new Error('Could not request user media');
    }

    this.starting = new Promise(async (resolve, reject) => {
      try {
        // –ë–∞–∑–æ–≤—ñConstrainst –¥–ª—è –∞—É–¥—ñ–æ
        const audioConstraints: MediaTrackConstraints = {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        };

        // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ deviceId - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
        if (deviceId) {
          audioConstraints.deviceId = { exact: deviceId };
          console.log('üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π:', deviceId);
        } else {
          console.log('üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ MediaStream
        this.stream = await navigator.mediaDevices.getUserMedia({ 
          audio: audioConstraints 
        });

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
        const track = this.stream.getAudioTracks()[0];
        const settings = track.getSettings();
        console.log('‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ:', {
          label: track.label,
          deviceId: settings.deviceId,
          sampleRate: settings.sampleRate,
          channelCount: settings.channelCount,
          echoCancellation: settings.echoCancellation,
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ AudioContext
        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        
        if (isSafari) {
          // Safari: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
          this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
          console.log('Safari AudioContext sampleRate:', this.audioContext.sampleRate);
        } else {
          // Chrome/Firefox: –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–¥–∞—Ç–∏ sampleRate
          try {
            this.audioContext = await audioContext({ sampleRate: this.sampleRate });
          } catch (e) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ sampleRate, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∏–π:', e);
            this.audioContext = new AudioContext();
          }
        }

        this.source = this.audioContext.createMediaStreamSource(this.stream);

        // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ AudioWorklet –¥–ª—è –∑–∞–ø–∏—Å—É
        const workletName = 'audio-recorder-worklet';
        const src = createWorketFromSrc(workletName, AudioRecordingWorklet);
        await this.audioContext.audioWorklet.addModule(src);
        
        this.recordingWorklet = new AudioWorkletNode(
          this.audioContext,
          workletName
        );
        
        this.recordingWorklet.port.onmessage = async (ev: MessageEvent) => {
          const arrayBuffer = ev.data.data.int16arrayBuffer;
          if (arrayBuffer) {
            const arrayBufferString = arrayBufferToBase64(arrayBuffer);
            this.emit('data', arrayBufferString);
          }
        };
        
        this.source.connect(this.recordingWorklet);

        // VU meter worklet
        const vuWorkletName = 'vu-meter';
        await this.audioContext.audioWorklet.addModule(
          createWorketFromSrc(vuWorkletName, VolMeterWorket)
        );
        
        this.vuWorklet = new AudioWorkletNode(this.audioContext, vuWorkletName);
        this.vuWorklet.port.onmessage = (ev: MessageEvent) => {
          this.emit('volume', ev.data.volume);
        };
        
        this.source.connect(this.vuWorklet);

        this.recording = true;
        resolve();
        this.starting = null;
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error);
        reject(error);
        this.starting = null;
      }
    });

    return this.starting;
  }

  stop() {
    const handleStop = () => {
      this.source?.disconnect();
      this.stream?.getTracks().forEach(track => track.stop());
      this.stream = undefined;
      this.recordingWorklet = undefined;
      this.vuWorklet = undefined;
      this.recording = false;
    };

    if (this.starting) {
      this.starting.then(handleStop);
      return;
    }
    
    handleStop();
  }
}
