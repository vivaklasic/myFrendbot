/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import { audioContext } from './utils';
import AudioRecordingWorklet from './worklets/audio-processing';
import VolMeterWorket from './worklets/vol-meter';
import { createWorketFromSrc } from './audioworklet-registry';
import EventEmitter from 'eventemitter3';

function arrayBufferToBase64(buffer: ArrayBuffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}

export class AudioRecorder extends EventEmitter {
  stream: MediaStream | undefined;
  audioContext: AudioContext | undefined;
  source: MediaStreamAudioSourceNode | undefined;
  recording: boolean = false;
  recordingWorklet: AudioWorkletNode | undefined;
  vuWorklet: AudioWorkletNode | undefined;
  private starting: Promise<void> | null = null;
  // –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bluetooth
  private audioElement: HTMLAudioElement | undefined;

  constructor(public sampleRate = 16000) {
    super();
  }

  async getAudioInputs(): Promise<MediaDeviceInfo[]> {
    try {
      const tempStream = await navigator.mediaDevices.getUserMedia({ audio: true });
      tempStream.getTracks().forEach(track => track.stop());
    } catch (e) {
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω:', e);
    }

    const devices = await navigator.mediaDevices.enumerateDevices();
    return devices.filter(device => device.kind === 'audioinput');
  }

  /**
   * –ö–†–ò–¢–ò–ß–ù–û: –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Bluetooth HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
   * –¶–µ –ø—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ–º–∏–∫–∞—î Bluetooth –∑ A2DP (—Ç—ñ–ª—å–∫–∏ –º—É–∑–∏–∫–∞) –Ω–∞ HSP (–¥–∑–≤—ñ–Ω–∫–∏)
   */
  private async activateBluetoothProfile(): Promise<MediaStream | null> {
    try {
      console.log('üéß –°–ø—Ä–æ–±–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Bluetooth HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—å...');
      
      // MAGIC: –ó–∞–ø–∏—Ç—É—î–º–æ echoCancellation: true - —Ü–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è Android 
      // –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ Bluetooth –Ω–∞ HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—å (–¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤)
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,  // –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó Bluetooth –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
          noiseSuppression: true,
          autoGainControl: true,
          // –ù–ï –≤–∫–∞–∑—É—î–º–æ deviceId - –¥–æ–∑–≤–æ–ª—è—î–º–æ —Å–∏—Å—Ç–µ–º—ñ –≤–∏–±—Ä–∞—Ç–∏ "communications" –ø—Ä–∏—Å—Ç—Ä—ñ–π
        }
      });

      const track = stream.getAudioTracks()[0];
      const settings = track.getSettings();
      
      console.log('‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä—ñ–π:', {
        label: track.label,
        sampleRate: settings.sampleRate,
        echoCancellation: settings.echoCancellation,
        deviceId: settings.deviceId
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ sampleRate = 8000 –∞–±–æ 16000, —Ü–µ HSP/HFP (–¥–æ–±—Ä–µ!)
      // –Ø–∫—â–æ 44100 –∞–±–æ 48000, —Ü–µ –≤—Å–µ —â–µ A2DP (–ø–æ–≥–∞–Ω–æ)
      if (settings.sampleRate && settings.sampleRate <= 16000) {
        console.log('‚úÖ Bluetooth HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—å –ê–ö–¢–ò–í–û–í–ê–ù–û (sampleRate:', settings.sampleRate, 'Hz)');
        return stream;
      } else {
        console.warn('‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ, Bluetooth –≤—Å–µ —â–µ –≤ A2DP —Ä–µ–∂–∏–º—ñ (sampleRate:', settings.sampleRate, 'Hz)');
        return stream;
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó Bluetooth –ø—Ä–æ—Ñ—ñ–ª—é:', error);
      return null;
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —á–µ—Ä–µ–∑ Bluetooth-–Ω–∞–≤—É—à–Ω–∏–∫–∏
   */
  private setupBluetoothPlayback() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π audio –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –∑–≤—É–∫—É
    if (!this.audioElement) {
      this.audioElement = document.createElement('audio');
      this.audioElement.autoplay = true;
      this.audioElement.muted = false;
      
      // –í–ê–ñ–õ–ò–í–û: srcObject –∑ MediaStream –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç–æ–π —Å–∞–º–∏–π 
      // –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä—ñ–π, —â–æ —ñ –¥–ª—è –∑–∞–ø–∏—Å—É (Bluetooth)
      if (this.stream) {
        this.audioElement.srcObject = this.stream;
      }
    }
  }

  async start(deviceId?: string) {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      throw new Error('Could not request user media');
    }

    this.starting = new Promise(async (resolve, reject) => {
      try {
        // –ö–†–û–ö 1: –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Bluetooth HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—å
        this.stream = await this.activateBluetoothProfile();
        
        if (!this.stream) {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—É–¥—ñ–æ–ø–æ—Ç—ñ–∫');
        }

        // –ö–†–û–ö 2: –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Bluetooth
        this.setupBluetoothPlayback();

        // Safari compatibility
        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        
        if (isSafari) {
          this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
          console.log('Safari: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞—Ç–∏–≤–Ω–∏–π sampleRate:', this.audioContext.sampleRate);
        } else {
          // –î–ª—è HSP/HFP –ø—Ä–æ—Ñ—ñ–ª—é —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–±–µ—Ä–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π sampleRate (8000 –∞–±–æ 16000)
          // –ù–µ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
          try {
            this.audioContext = new AudioContext();
            console.log('AudioContext sampleRate:', this.audioContext.sampleRate);
          } catch (e) {
            console.warn('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è AudioContext:', e);
            this.audioContext = new AudioContext();
          }
        }

        this.source = this.audioContext.createMediaStreamSource(this.stream);

        const workletName = 'audio-recorder-worklet';
        const src = createWorketFromSrc(workletName, AudioRecordingWorklet);
        await this.audioContext.audioWorklet.addModule(src);
        
        this.recordingWorklet = new AudioWorkletNode(
          this.audioContext,
          workletName
        );
        
        this.recordingWorklet.port.onmessage = async (ev: MessageEvent) => {
          const arrayBuffer = ev.data.data.int16arrayBuffer;
          if (arrayBuffer) {
            const arrayBufferString = arrayBufferToBase64(arrayBuffer);
            this.emit('data', arrayBufferString);
          }
        };
        
        this.source.connect(this.recordingWorklet);

        // VU meter worklet
        const vuWorkletName = 'vu-meter';
        await this.audioContext.audioWorklet.addModule(
          createWorketFromSrc(vuWorkletName, VolMeterWorket)
        );
        
        this.vuWorklet = new AudioWorkletNode(this.audioContext, vuWorkletName);
        this.vuWorklet.port.onmessage = (ev: MessageEvent) => {
          this.emit('volume', ev.data.volume);
        };
        
        this.source.connect(this.vuWorklet);

        this.recording = true;
        console.log('üé§ –ó–∞–ø–∏—Å —Ä–æ–∑–ø–æ—á–∞—Ç–æ —á–µ—Ä–µ–∑ Bluetooth');
        resolve();
        this.starting = null;
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error);
        reject(error);
        this.starting = null;
      }
    });

    return this.starting;
  }

  /**
   * –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ Bluetooth-–Ω–∞–≤—É—à–Ω–∏–∫–∏
   * –í–∏–∫–ª–∏–∫–∞—Ç–∏, –∫–æ–ª–∏ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
   */
  playAudioThroughBluetooth(audioBlob: Blob) {
    if (!this.audioElement) {
      this.audioElement = document.createElement('audio');
      this.audioElement.autoplay = true;
      document.body.appendChild(this.audioElement);
    }
    
    const url = URL.createObjectURL(audioBlob);
    this.audioElement.src = url;
    this.audioElement.play().catch(e => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', e);
    });
    
    this.audioElement.onended = () => {
      URL.revokeObjectURL(url);
    };
  }

  stop() {
    const handleStop = () => {
      this.source?.disconnect();
      this.stream?.getTracks().forEach(track => track.stop());
      this.stream = undefined;
      this.recordingWorklet = undefined;
      this.vuWorklet = undefined;
      this.recording = false;
      
      // –û—á–∏—Å—Ç–∏—Ç–∏ audio element
      if (this.audioElement) {
        this.audioElement.pause();
        this.audioElement.srcObject = null;
        this.audioElement.src = '';
        if (this.audioElement.parentNode) {
          this.audioElement.parentNode.removeChild(this.audioElement);
        }
        this.audioElement = undefined;
      }
      
      console.log('üõë –ó–∞–ø–∏—Å –∑—É–ø–∏–Ω–µ–Ω–æ');
    };

    if (this.starting) {
      this.starting.then(handleStop);
      return;
    }
    
    handleStop();
  }
}
